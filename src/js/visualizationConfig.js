/*
 module that has all the settings for the symbology
 stores colors, sizes and creates svg symbols
*/

import colors from '../style/colors.scss';

 /* helper functions */

 function setAttributes(el, attrs) {
  for (let key in attrs) {
    if (attrs.hasOwnProperty(key)) {
      el.setAttribute(key, attrs[key]);
    }
  }
 }

 function createSVG() {
  let svg = document.createElement('svg');
  setAttributes(svg, {
    'version': '1.1',
    'xmlns': 'http://www.w3.org/2000/svg'
  });
  return svg;
 }

 function createEllipse(actor, count) {
   let ellipse = document.createElement('ellipse');
   setAttributes(ellipse, {
     'style': 'fill:' + colors['actors-' + actor.replace(' ','').toLowerCase()],
     'cx': '10',
     'cy': (count * 20 + 10).toString(),
     'rx': '10',
     'ry': '10'
   });
   return ellipse;
 }

 function createPortrait(count) {
   let path = document.createElement('path');
   path.setAttribute('d', 'm 13.07701,16.991715 c 0.01607,-0.248917 0.08701,-0.505554 0.14042,-0.744456 0.05279,-0.235146 0.116217,-0.463407 0.165249,-0.699179 0.04403,-0.142089 0.116843,-0.254759 0.245996,-0.332585 0.174221,-0.105158 0.42898,-0.108496 0.616972,-0.206352 0.156695,-0.08179 0.290646,-0.195712 0.366594,-0.358249 0.153148,-0.327368 0.06343,-0.734858 0.01732,-1.076832 -0.02608,-0.191956 -0.07261,-0.397265 -0.07261,-0.591099 0,-0.228261 -0.155652,-0.531009 -0.204684,-0.759479 -0.05905,-0.275832 -0.104324,-0.554586 -0.141255,-0.834383 -0.07303,-0.550413 -0.128109,-1.110215 -0.155234,-1.6650098 -0.0096,-0.197173 0.0092,-0.421886 -0.08993,-0.600906 -0.207605,-0.375149 -0.752802,-0.523707 -1.128159,-0.661206 -0.230765,-0.08471 -0.46299,-0.168587 -0.682279,-0.281257 -0.157321,-0.08075 -0.533304,-0.259975 -0.594438,-0.440038 -0.106619,-0.314433 -0.03672,-0.730268 -0.490323,-0.54478 -0.0092,0.0038 0.01085,-0.180898 0.01732,-0.201345 0.02337,-0.0747 0.06259,-0.14355 0.105159,-0.208857 0.08826,-0.13583 0.196755,-0.257263 0.282509,-0.395179 0.07282,-0.117052 0.02441,-0.281258 0.0676,-0.409159 l 0.08367,-0.327577 c 0.441499,-0.364717 0.412497,-0.964997 0.345729,-1.038441 -0.02003,-0.0434 -0.07636,-0.06009 -0.08805,-0.0724 -0.03025,-0.03171 -0.02504,-0.157946 -0.0092,-0.236398 0.120182,-0.215116 0.06698,-0.629282 0.03923,-0.769493 -0.02149,-0.104115 -0.07824,-0.215951 -0.126023,-0.32403 -0.122059,-0.27625 -0.22534,-0.566688 -0.56794,-0.67435 -0.451722,-0.119347 -1.5932351,-0.08179 -2.1106821,0.544571 -0.44901,0.461112 -0.251212,1.678364 -0.335506,1.696307 -0.01774,-0.01294 -0.09577,0.02545 -0.100151,0.114757 -0.03338,0.22367 -0.02712,0.749046 0.299618,0.980436 0.0555,0.03651 0.01774,0.291273 0.01774,0.382869 -0.0083,0.200302 0.175264,0.500964 0.162745,0.601115 0,0.150226 -0.05091,0.239319 0.07511,0.312972 0.09118,0.05967 0.61572,0.255176 0.574825,0.473213 -0.02525,0.134787 0.04882,0.342391 0.08805,0.47071 0.03881,0.127484 0.08075,0.291272 0.1650401,0.397266 0.143759,0.180897 0.535808,-0.293568 0.632203,-0.377653 0.354076,-0.190704 0.531009,0.367637 0.830628,0.490322 0.326742,1.361637 0.177559,3.8975438 0.09535,4.4527558 -0.106828,0.542902 -0.149809,0.149809 -0.149809,0.149809 -0.05675,-1.208072 -2.0766731,-5.7169528 -2.4509881,-5.7872668 -0.298783,-0.143759 -0.449219,0.299618 -0.735275,0.299618 -0.08346,-0.136664 -0.02817,-0.281883 0.06677,-0.383912 0.201345,-0.136873 0.141046,-0.21449 0.04611,-0.292107 -0.07762,-0.06906 -0.12811,-0.215116 -0.07866,-0.343226 0.02337,-0.140003 -0.0088,-0.326326 -0.126232,-0.442542 -0.07637,-0.07553 -0.398934,-0.159616 -0.316936,-0.295863 0.03317,-0.05508 0.195712,-0.03756 0.246205,-0.06885 0.14355,-0.08951 0.07866,-0.20677 -0.06364,-0.227426 -0.126232,-0.01836 -0.187783,-0.119138 -0.207605,-0.253716 -0.01815,-0.123728 0.02003,-0.248708 0.0242,-0.372437 0.0019,-0.05842 0.0027,-0.119346 -0.01815,-0.175055 -0.0217,-0.0578 -0.08429,-0.08826 -0.105784,-0.136039 -0.0023,-0.0052 -0.01148,-0.0217 -0.0042,-0.147514 0.0021,-0.03797 0.05738,0.01273 0.0603,-0.03297 -0.01001,0.005 0.126649,-2.15575 0.126649,-2.160341 -0.0079,-0.04256 -0.335505,-0.06385 -0.355536,-0.03568 0.0044,0.0038 -0.119972,2.173695 -0.117677,2.176198 -6.26e-4,0.04069 0.06719,0.0058 0.06635,0.04152 0.0042,0.03735 -0.0073,0.145219 -0.01189,0.186323 -0.312763,0.224922 -0.102029,0.871522 -0.551039,1.00297 -0.299619,0.08763 -0.05467,0.510979 -0.157321,0.686661 -0.06698,0.114339 -0.192164,0.169422 -0.245787,0.304834 -0.05049,0.127693 -0.05717,0.270825 -0.05091,0.406446 0.01252,0.278754 0.155025,0.4198 0.154608,0.807885 -4.17e-4,0.315893 0.286056,0.537269 0.581293,0.596316 0.374106,0.147723 0.657867,-0.174221 0.889258,-0.01085 0.0042,0.244118 -0.02316,0.47384 -0.125189,0.663918 -0.228261,0.425016 -0.823116,0.538103 -1.195553,0.16671 -0.513482,-0.199676 -0.231599,-0.490114 -0.286056,-0.735276 0.004,0.01774 -0.590265,0.207188 -0.649104,0.246414 -0.166083,0.110792 -0.135621,0.259558 -0.134995,0.437952 0.0035,1.2777588 -0.167753,2.5427918 -0.320483,3.8086588 -0.02566,0.213029 -0.04945,0.426059 -0.07386,0.639088 -0.01878,0.163789 -0.0747,0.357623 -0.01753,0.514109 0.187992,0.515569 0.698553,0.94434 1.141513,1.216835 0.297532,0.182984 0.594646,-0.160451 0.859629,-0.04716 0.259141,0.110792 0.218455,0.5911 0.233895,0.811015 1.908011,2.707075 3.0815531,0.454013 5.5147731,0.698344 z M 7.6392279,5.8747452 l -0.0409,0.05446 c -0.06823,-0.08179 -0.06823,-0.217828 0,-0.299618 0.08179,0.05467 0.05529,0.166084 0.0409,0.245161 z m 1.525007,8.9737388 c -0.06802,0.245161 -0.394761,0.108914 -0.585466,0.149809 -0.09535,-0.0409 -0.04089,-0.136038 -0.05446,-0.204266 0.353867,-0.3812 0.122477,-0.939542 0.05446,-1.375407 l 0.585466,0 c 0.136247,0.422094 0.258724,1.034893 0,1.429864 z m 3.1320141,-4.26226 c -0.02232,-0.0052 0.0052,-0.306504 0.04131,-0.309216 0.06364,0.0027 1.075788,0.03046 0.898229,0.554377 -0.279171,-0.04903 -0.710029,-0.124771 -0.939542,-0.245161 z');
   path.setAttribute('transform', 'translate(0,' + (count * 20) +')');
   return path;
 }

export default {

  // symbol and color for the general location symbol
  /* alternatives:
    locationSymbol: './src/img/circle-orange.svg',
    locationColor: colors.orange,
    locationSymbol: './src/img/circle-blue.svg',
    locationColor: colors.cyan,
  */
  allLocationsSymbol: './src/img/circle-blue.svg',
  allLocationsColor: colors.cyan,

  // values used for visualizing the number of times Bond visited a city
  minCount: 1, // minimum number of times a city was visited
  maxCount: 14, // maximum number of times a city was visited
  minSize: 20,  // symbol size corresponding to minCount
  maxSize: 40, // symbol size corresponding to maxCount

  // interpolator that gets the size of the symbol based on the number of times Bond visited a city
  getLocationSize(count) {
    return (this.maxSize - this.minSize) * (count - this.minCount) / (this.maxCount - this.minCount) + this.minSize;
  },

  // dynamically create an svg symbol for a location with all the actors that visited that location
  getSceneSymbolForActors(actors) {
    let svg = createSVG();
    svg.setAttribute('viewBox', '0 0 20 100');
    svg.setAttribute('height', '100px');
    svg.setAttribute('width', '20px');
    actors.forEach((actor, index) => {
      svg.appendChild(createEllipse(actor, 4 - index));
      svg.appendChild(createPortrait(4 - index));
    });
    const svgAsString = new XMLSerializer().serializeToString(svg).replace(/a0:/g, '');
    const svgAsBase64 = 'data:image/svg+xml;base64, ' + window.btoa(svgAsString);
    return svgAsBase64;
  },

  // dynamically create an svg symbol for an actor for the legend
  getDOMSymbolForActors(actor) {
    let svg = createSVG();
    svg.setAttribute('viewBox', '0 0 20 20');
    svg.setAttribute('height', '25px');
    svg.setAttribute('width', '25px');
    const ellipse = createEllipse(actor, 0);
    svg.appendChild(ellipse);
    const portrait = createPortrait(0);
    svg.appendChild(portrait);
    const svgAsString = new XMLSerializer().serializeToString(svg).replace(/a0:/g, '');
    return svgAsString;
  }
};